from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="‚ùì FAQ")],
    ],
    resize_keyboard=True
)

def get_inline_categories(categories, parent_prefix="cat", page=1, per_page=5, parent_id_for_cb=None):
    if not categories:
        return None

    # –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ID —Ä–æ–¥–∏—Ç–µ–ª—è –≤ callback_data
    cb_prefix = parent_prefix
    if parent_prefix == 'subcat' and parent_id_for_cb:
        cb_prefix = f"subcat_{parent_id_for_cb}"

    buttons = [
        [InlineKeyboardButton(text=cat['name'], callback_data=f"{parent_prefix}_{cat['id']}")]
        for cat in categories[(page-1)*per_page:page*per_page]
    ]
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if len(categories) > page*per_page:
        buttons.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=f"{cb_prefix}_page_{page+1}")])
    if page > 1:
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{cb_prefix}_page_{page-1}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

def get_inline_products(products):
    if not products:
        return None
    buttons = [
        [InlineKeyboardButton(text=prod['name'], callback_data=f"product_{prod['id']}")]
        for prod in products
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

def get_add_to_cart_keyboard(product_id):
    if not product_id:
        return None
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"addcart_{product_id}")]
    ])

def get_quantity_keyboard(product_id, max_qty=10):
    buttons = []
    row = []
    for i in range(1, max_qty+1):
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"qty_{product_id}_{i}"))
        if i % 5 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

def get_confirm_keyboard(product_id, qty):
    buttons = [
        [InlineKeyboardButton(text=f"‚úÖ –î–æ–±–∞–≤–∏—Ç—å {qty} —à—Ç.", callback_data=f"confirm_{product_id}_{qty}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_cart_keyboard(cart_items):
    if not cart_items:
        return None
    buttons = []
    for item in cart_items:
        # –†—è–¥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–Ω–æ–ø–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞)
        buttons.append([
            InlineKeyboardButton(
                text=item['name'],
                callback_data=f"product_{item['product_id']}"
            )
        ])
        # –†—è–¥ 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ
        buttons.append([
            InlineKeyboardButton(text="‚ûñ", callback_data=f"cart_decr_{item['id']}"),
            InlineKeyboardButton(text=f"{item['quantity']} —à—Ç.", callback_data="cart_noop"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"cart_incr_{item['id']}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delcart_{item['id']}")
        ])
    buttons.append([InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_keyboard(order_id: int, total_cost: float, payment_url: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π-–∑–∞–≥–ª—É—à–∫–æ–π."""
    buttons = [
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {total_cost:.2f} ‚ÇΩ", url=payment_url)],
        # –ö–Ω–æ–ø–∫–∞-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid_{order_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_faq_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É FAQ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="faq_back_to_list"),
            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_faq_keyboard(faqs, show_all_button=True):
    buttons = [
        [InlineKeyboardButton(text=faq['question'], callback_data=f"faq_{faq['id']}")]
        for faq in faqs
    ]
    if show_all_button:
        buttons.append([InlineKeyboardButton(text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏", callback_data="faq_all")])
    if not buttons or (not faqs and not show_all_button):
        return None
    return InlineKeyboardMarkup(inline_keyboard=buttons)
