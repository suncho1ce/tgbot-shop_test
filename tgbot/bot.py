import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.exceptions import TelegramForbiddenError
from decimal import Decimal
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import os
from dotenv import load_dotenv
from keyboards import main_menu, get_inline_categories, get_inline_products, get_add_to_cart_keyboard, get_quantity_keyboard, get_confirm_keyboard, get_cart_keyboard, get_faq_keyboard, get_payment_keyboard, get_back_to_faq_keyboard
from db import (get_pool, fetch_categories, fetch_subcategories, fetch_products, fetch_product, fetch_cart, add_to_cart, remove_from_cart, create_order, search_faq, get_faq_answer, get_all_faq, add_or_update_user, get_pending_broadcast, get_all_active_users_ids, finalize_broadcast, add_recipients_to_broadcast, get_broadcast_recipients_from_db, update_cart_item_quantity, update_order_status)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from excel_export import append_order_to_excel

load_dotenv()

API_TOKEN = os.getenv("TG_BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
CHANNEL_LINK = os.getenv("CHANNEL_LINK")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
 
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ("member", "administrator", "creator")
    except TelegramBadRequest as e:
        logging.critical(f"CRITICAL: Subscription check failed due to bad request. Check if bot is admin in the channel {CHANNEL_ID}. Error: {e}")
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –∫–∞–Ω–∞–ª —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –¥–æ—Å—Ç—É–ø –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º.
        return False
    except Exception as e:
        logging.error(f"Unexpected error in subscription check for user {user_id}: {e}")
        return False

@dp.startup()
async def on_startup(dispatcher):
    pool = await get_pool()
    dispatcher.workflow_data["pool"] = pool
    logging.info("DB pool created")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
    asyncio.create_task(broadcast_scheduler(pool))

@dp.shutdown()
async def on_shutdown(dispatcher):
    pool = dispatcher.workflow_data.get("pool")
    if pool:
        await pool.close()
        logging.info("DB pool closed")

@dp.message(Command("start"))
async def cmd_start(message: types.Message, pool):
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscribed = await check_subscription(message.from_user.id)

    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    await add_or_update_user(
        pool, message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
        subscribed
    )
    if not subscribed:
        text = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª."
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –µ—Å—Ç—å –≤ .env, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        if CHANNEL_LINK:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=CHANNEL_LINK)]
            ])
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

@dp.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_handler(message: types.Message, pool):
    cats = await fetch_categories(pool)
    kb = get_inline_categories(cats)
    if not kb:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await message.answer("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query(F.data.regexp(r"^(cat|subcat_\d+)_page_(\d+)$"))
async def category_page_callback(call: types.CallbackQuery, pool):
    prefix_part, page_str = call.data.rsplit("_page_", 1)
    page = int(page_str)

    if prefix_part == 'cat':
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        items = await fetch_categories(pool)
        kb = get_inline_categories(items, parent_prefix="cat", page=page)
        await call.message.edit_text("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

    elif prefix_part.startswith("subcat_"):
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        parent_id = int(prefix_part.split("_")[1])
        items = await fetch_subcategories(pool, parent_id)
        kb = get_inline_categories(items, parent_prefix="subcat", page=page, parent_id_for_cb=parent_id)
        await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    
    await call.answer()

@dp.callback_query(F.data.startswith("cat_"))
async def category_callback(call: types.CallbackQuery, pool):
    cat_id = int(call.data.split("_")[1])
    subcats = await fetch_subcategories(pool, cat_id)
    kb = get_inline_categories(subcats, parent_prefix="subcat", parent_id_for_cb=cat_id)
    if kb:
        await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
        return
    products = await fetch_products(pool, cat_id)
    kb = get_inline_products(products)
    if not kb:
        await call.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await call.message.edit_text("üè∑Ô∏è –¢–æ–≤–∞—Ä—ã:", reply_markup=kb)

@dp.callback_query(F.data.startswith("subcat_"))
async def subcategory_callback(call: types.CallbackQuery, pool):
    cat_id = int(call.data.split("_")[1])
    products = await fetch_products(pool, cat_id)
    kb = get_inline_products(products)
    if not kb:
        await call.message.edit_text("–í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await call.message.edit_text("üè∑Ô∏è –¢–æ–≤–∞—Ä—ã:", reply_markup=kb)

@dp.callback_query(F.data.startswith("product_"))
async def product_callback(call: types.CallbackQuery, pool):
    prod_id = int(call.data.split("_")[1])
    prod = await fetch_product(pool, prod_id)
    if not prod:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    text = f"<b>{prod['name']}</b>\n–¶–µ–Ω–∞: {prod['price']}‚ÇΩ\n\n{prod['description']}"
    kb = get_add_to_cart_keyboard(prod_id)

    image_path = os.path.join('/app/media', prod['image']) if prod.get('image') else None

    if image_path and os.path.exists(image_path):
        photo_to_send = FSInputFile(image_path)
        await call.message.answer_photo(photo_to_send, caption=text, reply_markup=kb, parse_mode=ParseMode.HTML)
    else:
        if image_path:
            logging.warning(f"Image file not found at path: {image_path}")
        await call.message.answer(f"üñºÔ∏è [—Ñ–æ—Ç–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ]\n{text}", reply_markup=kb if kb else None, parse_mode=ParseMode.HTML)
    await call.answer()

@dp.callback_query(F.data.startswith("addcart_"))
async def addcart_callback(call: types.CallbackQuery):
    prod_id = int(call.data.split("_")[1])
    # –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤–æ–µ
    await call.message.edit_reply_markup(reply_markup=get_quantity_keyboard(prod_id))
    await call.answer()

@dp.callback_query(F.data.startswith("qty_"))
async def quantity_callback(call: types.CallbackQuery):
    _, prod_id, qty = call.data.split("_")
    text = f"–î–æ–±–∞–≤–∏—Ç—å {qty} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É?"
    kb = get_confirm_keyboard(int(prod_id), int(qty))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –¥–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å (caption).
    if call.message.photo:
        await call.message.edit_caption(caption=text, reply_markup=kb)
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç.
    else:
        await call.message.edit_text(text, reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_callback(call: types.CallbackQuery, pool):
    _, prod_id, qty = call.data.split("_")
    prod_id = int(prod_id)
    qty = int(qty)
    await add_to_cart(pool, call.from_user.id, prod_id, qty)
    await call.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    await update_cart_message(call, pool)

async def format_cart_text(items: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π."""
    if not items:
        return "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    text_lines = ["<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>"]
    total_cost = Decimal(0)

    for item in items:
        item_price = Decimal(item['price'])
        item_quantity = item['quantity']
        position_cost = item_price * item_quantity
        total_cost += position_cost
        text_lines.append(
            f"‚Ä¢ {item['name']} ({item_quantity} —à—Ç. √ó {item_price:.2f}‚ÇΩ) = <b>{position_cost:.2f}‚ÇΩ</b>"
        )

    text_lines.append(f"\n<b>–ò—Ç–æ–≥–æ: {total_cost:.2f}‚ÇΩ</b>")
    return "\n".join(text_lines)

class OrderForm(StatesGroup):
    delivery = State()

@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def cart_handler(message: types.Message, pool):
    items = await fetch_cart(pool, message.from_user.id)
    text = await format_cart_text(items)
    await message.answer(text, reply_markup=get_cart_keyboard(items))

async def update_cart_message(call: types.CallbackQuery, pool):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫—É 'message is not modified'."""
    items = await fetch_cart(pool, call.from_user.id)
    text = await format_cart_text(items)
    kb = get_cart_keyboard(items)
    try:
        # –ï—Å–ª–∏ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å —Ñ–æ—Ç–æ, –º—ã –Ω–µ –º–æ–∂–µ–º –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ.
        # –ü–æ—ç—Ç–æ–º—É –º—ã —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ (–∫–æ—Ä–∑–∏–Ω—É).
        if call.message.photo:
            await call.message.delete()
            await call.message.answer(text, reply_markup=kb)
        else:
            await call.message.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logging.error(f"Error updating cart message: {e}")
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@dp.callback_query(F.data == "cart_noop")
async def cart_noop_callback(call: types.CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª-–≤–∞)."""
    await call.answer()

@dp.callback_query(F.data.startswith(("cart_incr_", "cart_decr_")))
async def cart_quantity_callback(call: types.CallbackQuery, pool):
    _, action, cartitem_id_str = call.data.split("_")
    cartitem_id = int(cartitem_id_str)
    change = 1 if action == "incr" else -1
    await update_cart_item_quantity(pool, cartitem_id, call.from_user.id, change)
    await update_cart_message(call, pool)
    await call.answer()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω

@dp.callback_query(F.data.startswith("delcart_"))
async def delcart_callback(call: types.CallbackQuery, pool):
    cartitem_id = int(call.data.split("_")[1])
    await remove_from_cart(pool, cartitem_id, call.from_user.id)
    await call.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    await update_cart_message(call, pool)


@dp.callback_query(F.data == "order")
async def order_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderForm.delivery)
    await call.answer()

@dp.message(OrderForm.delivery)
async def process_delivery(message: types.Message, state: FSMContext, pool):
    delivery_info = message.text
    try:
        order, order_items = await create_order(pool, message.from_user.id, delivery_info)
        if not order or not order_items:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            await state.clear()
            return

        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        await asyncio.to_thread(
            append_order_to_excel,
            order['id'],
            message.from_user.id,
            delivery_info,
            order['created_at'],
            order['status'],
            order_items
        )

        # --- –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã ---
        total_cost = sum(Decimal(item['product_price']) * item['quantity'] for item in order_items)
        payment_url = f"https://example.com/pay?order_id={order['id']}"  # –ó–ê–ì–õ–£–®–ö–ê

        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order['id']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ.",
            reply_markup=get_payment_keyboard(order['id'], total_cost, payment_url)
        )
        # --- –ö–æ–Ω–µ—Ü –∑–∞–≥–ª—É—à–∫–∏ ---
    except Exception as e:
        logging.error(f"Failed to create order for user {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()

@dp.callback_query(F.data.startswith("paid_"))
async def paid_callback(call: types.CallbackQuery, pool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    order_id = int(call.data.split("_")[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    updated_order_id = await update_order_status(pool, order_id, call.from_user.id, 'paid')

    if updated_order_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        await call.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await call.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏.", reply_markup=main_menu)
    else:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", show_alert=True)
    await call.answer()

class FAQForm(StatesGroup):
    question = State()

@dp.message(F.text == "‚ùì FAQ")
async def faq_handler(message: types.Message, state: FSMContext, pool):
    faqs = await search_faq(pool, None)
    await message.answer(
        "‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:",
        reply_markup=get_faq_keyboard(faqs)
    )
    await state.set_state(FAQForm.question)

@dp.message(FAQForm.question)
async def faq_search(message: types.Message, state: FSMContext, pool):
    faqs = await search_faq(pool, message.text)
    kb = get_faq_keyboard(faqs)
    if not kb:
        await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏'.")
        await state.clear()
        return
    await message.answer("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=kb)
    await state.clear()

@dp.callback_query(F.data.regexp(r"^faq_\d+$"))
async def faq_answer_callback(call: types.CallbackQuery, pool):
    faq_id = int(call.data.split("_")[1])
    answer = await get_faq_answer(pool, faq_id)
    kb = get_back_to_faq_keyboard()
    if answer:
        await call.message.edit_text(answer, reply_markup=kb)
    else:
        await call.message.edit_text("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "faq_all")
async def faq_all_callback(call: types.CallbackQuery, pool):
    faqs = await get_all_faq(pool)
    kb = get_faq_keyboard(faqs, show_all_button=False)
    if not faqs:
        await call.message.edit_text("–°—Ç–∞—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        await call.answer()
        return
    await call.message.edit_text("–í—Å–µ —Å—Ç–∞—Ç—å–∏:", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "faq_back_to_list")
async def faq_back_to_list_callback(call: types.CallbackQuery, pool):
    """Handles the 'Back to questions' button press."""
    faqs = await get_all_faq(pool)
    kb = get_faq_keyboard(faqs, show_all_button=False)
    if not faqs:
        await call.message.edit_text("–°—Ç–∞—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        await call.message.edit_text("–í—Å–µ —Å—Ç–∞—Ç—å–∏:", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_callback(call: types.CallbackQuery):
    """Handles the 'To main menu' button press."""
    await call.message.delete()
    await call.message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )
    await call.answer()

async def broadcast_scheduler(pool):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."""
    while True:
        try:
            broadcast = await get_pending_broadcast(pool)
            if broadcast:
                broadcast_id = broadcast['id']
                logging.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É #{broadcast_id}...")
 
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
                explicit_recipients = await get_broadcast_recipients_from_db(pool, broadcast_id)
                
                if explicit_recipients:
                    user_ids = explicit_recipients
                    should_add_recipients_to_db = False # –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã –≤ –∞–¥–º–∏–Ω–∫–µ
                else:
                    user_ids = await get_all_active_users_ids(pool)
                    should_add_recipients_to_db = True # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º, –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
 
                if not user_ids:
                    logging.warning(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id}: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞—é.")
                    await finalize_broadcast(pool, broadcast_id)
                    continue
 
                sent_user_ids = []
                for user_id in user_ids:
                    try:
                        await bot.send_message(chat_id=user_id, text=broadcast['message'])
                        sent_user_ids.append(user_id)
                        await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
                    except (TelegramForbiddenError, TelegramBadRequest):
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                
                if should_add_recipients_to_db and sent_user_ids:
                    await add_recipients_to_broadcast(pool, broadcast_id, sent_user_ids) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤—Å–µ–º
                
                await finalize_broadcast(pool, broadcast_id)
                logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(sent_user_ids)}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        
        await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

async def main():
    # on_startup –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤–Ω—É—Ç—Ä–∏ start_polling –∏ —Å–æ–∑–¥–∞—Å—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    # Aiogram DI (Dependency Injection) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—Å—Ç —ç—Ç–æ—Ç –ø—É–ª
    # –≤ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç 'pool'.
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
